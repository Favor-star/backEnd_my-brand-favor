tags:
  - name: Users
    description: Users API
paths:
  /users/login:
    post:
      summary: Log a user
      tags:
        - Users
      description: To log a user in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        404:
          description: User is not found
        401:
          description: Password is incorrect
        200:
          description: User logged in successfully

  /users:
    get:
      summary: Get a list of users
      tags:
        - Users
      description: Return a full list of available users
      security:
        - jwt: []
      responses:
        404:
          description: Users could not be found
        200:
          description: Success
    post:
      summary: Register a user
      tags:
        - Users
      description: Add a user to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        409:
          description: User already exists
        401:
          description: The password couldn't be processed effectively
        201:
          description: User created successfully
        500:
          description: User could not be created
  /users/{id}: 
    patch: 
      summary: Update the user
      description: This method deals with updating the user
      security:
        - jwt: []
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        202:
          description: User updated successfully
        404:
          description: User could not be found
        500:
          description: Unexpected errors occurred
    delete:
      summary: Delete a provided story
      tags:
        - Users
      description: Delete a story once the id passed is correct
      security:
        - jwt: []
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        404:
          description: User was not found
        200:
          description: User deleted successfully
        500:
          description: Unexpected error. Please try again
